LanguageDefinition (
    ast_rules: [
        Rule(
            name: "Root", // Name of Rule (required)
            node: Root, // Associated AST Node (required)
            is_scope: true, // defaults to false
            children: [
                Multiple(Kind("constant_declaration"), Rule("ConstantDeclaration")),
                Multiple(Kind("parser_declaration"), Rule("Parser")),
                Multiple(Kind("control_declaration"), Rule("Control")),
                Multiple(Kind("instantiation"), Rule("Instantiation")),
                //Multiple(Kind("type_declaration"), Rule("TypeDeclaration")),
                Multiple(Kind("action_declaration"), Rule("ActionDeclaration")),
                Multiple(Kind("function_declaration"), Rule("FunctionDeclaration")),
                Multiple(Kind("error_declaration"), Rule("ErrorDeclaration")),
                Multiple(Kind("extern_declaration"), Rule("ExternDeclaration")),
            ]
        ),
        Rule(
            name: "ConstantDeclaration",
            node: ConstantDec,
            children: [ 
                Maybe(Field("annotation"), Rule("Annotation")),
                One(Field("type"), Rule("Type")),
                One(Field("name"), Node(Name)),
                One(Field("value"), Node(Value)),
            ]
        ),
        Rule(
            name: "Parser",
            node: ParserDec,
            is_scope: true,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                One(Path([Field("declaration"), Field("name")]), Node(Name)),
                One(Path([Field("declaration"), Field("parameters")]), Rule("Parameters")),
                One(Field("body"), Rule("Body")),
            ]
        ),
        Rule(
            name: "Control",
            node: ControlDec,
            is_scope: true,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                One(Path([Field("declaration"), Field("name")]), Node(Name)),
                One(Path([Field("declaration"), Field("parameters")]), Rule("Parameters")),
                One(Field("body"), Rule("Body")),
            ]
        ),
        Rule(
            name: "Instantiation",
            node: Instantiation,
            is_scope: true,
            children: [ 
                Maybe(Kind("annotation"), Rule("Annotation")),
                One(Kind("type_ref"), Rule("Type")),
                One(Kind("name"), Node(Name)),
                One(Kind("argument_list"), Rule("Args")),
            ]
        ),
        Rule(
            name: "ActionDeclaration",
            node: ControlAction,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                One(Field("name"), Node(Name)),
                Maybe(Field("parameters"), Rule("Parameters")),
                One(Field("block"), Rule("Block")),
            ],
        ),
        Rule(
            name: "FunctionDeclaration",
            node: Function,
            is_scope: true,
            children: [
                One(Kind("function_prototype"), Rule("FunctionPrototype")),
                One(Kind("block_statement"), Rule("Block")),
            ]
        ),
        Rule(
            name: "ErrorDeclaration",
            node: ErrorCst,
            children: [
                One(Field("option_list"), Rule("Options")),
            ]
        ),
        Rule(
            name: "ExternDeclaration",
            node: Extern,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                Maybe(Field("name"), Node(Name)),
                // maybe type parameters
                Maybe(Field("function"), Rule("FunctionPrototype")),
                Maybe(Field("method"), Rule("MethodList")),
            ]
        ),
        Rule(
            name: "FunctionPrototype",
            node: FunctionPrototype,
            children: [
                One(Kind("type_or_void"), Rule("Type")),
                One(Kind("name"), Node(Name)),
                One(Kind("parameter_list"), Rule("Parameters")),
            ]
        ),
        Rule(
            name: "MethodList",
            node: Methods,
            children: [
                Multiple(Kind("method_prototype"), Rule("MethodPrototype")),
            ]
        ),
        Rule(
            name: "MethodPrototype",
            node: MethodPrototype,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                Maybe(Field("function"), Rule("FunctionPrototype")),
                Maybe(Field("type"), Rule("Type")),
                Maybe(Field("parameters"), Rule("Parameters")),
            ]
        ),
        Rule(
            name: "Options",
            node: Options,
            children: [
                Multiple(Kind("name"), Node(Option)),
            ]
        ),
        Rule(
            name: "Args",
            node: Args,
            children: [
                Multiple(Kind("argument"), Rule("Arg")),
            ]
        ),
        Rule(
            name: "Arg",
            node: Arg,
        ),
        Rule(
            name: "Parameters",
            node: Params,
            children: [
                Multiple(Kind("parameter"), Rule("Parameter")),
            ]
        ),
        Rule(
            name: "Parameter",
            node: Param,
            children: [
                Maybe(Field("direction"), Rule("Direction")),
                One(Field("type"), Rule("Type")),
                One(Field("name"), Node(Name)),
            ]
        ),
        Rule(
            name: "Body",
            node: Body,
            is_scope: true,
            children: [
                Multiple(Kind("constant_declaration"), Rule("ConstantDeclaration")),
                Multiple(Kind("variable_declaration"), Rule("VariableDeclaration")),
                Multiple(Kind("instantiation"), Rule("Instantiation")),
                //Multiple(Kind("value_set_declaration"), Rule("ValueSetDeclaration")),

                //Multiple(Kind("parser_state"), Rule("ParserState")),
                Multiple(Kind("action_declaration"), Rule("ActionDeclaration")),
                //Multiple(Kind("table_declaration"), Rule("TableDeclaration")),
                Multiple(Kind("block_statement"), Rule("Block")),
            ]
        ),
        Rule(
            name: "Block",
            node: Block,
            is_scope: true,
            children: [
                Multiple(Kind("constant_declaration"), Rule("ConstantDeclaration")),
                Multiple(Kind("variable_declaration"), Rule("VariableDeclaration")),
                //Multiple(Kind("assignment_or_method_call_statement"), Rule("AssignmentOrMethodCall")),
                Multiple(Kind("direct_application"), Rule("DirectApplication")),
                Multiple(Kind("conditional_statement"), Rule("Conditional")),
                Multiple(Kind("empty_statement"), Node(EmptyStatement)),
                Multiple(Kind("block_statement"), Rule("Block")),
                Multiple(Kind("exit_statement"), Node(ExitStatement)),
                Multiple(Kind("return_statement"), Rule("Return")),
                Multiple(Kind("switch_statement"), Rule("Switch")),
            ]
        ),
        Rule(
            name: "VariableDeclaration",
            node: VariableDec,
            children: [
                Maybe(Field("annotation"), Rule("Annotation")),
                One(Field("type"), Rule("Type")),
                One(Field("name"), Node(Name)),
                One(Field("value"), Node(Value)),
            ]
        ),
        Rule(
            name: "Conditional",
            node: Conditional,
            children: [
                One(Field("expression"), Node(Value)),
                One(Field("bodyIf"), Rule("Block")),
                Maybe(Field("bodyElse"), Rule("Block")),
            ]
        ),
        Rule(
            name: "Switch",
            node: Switch,
            children: [
                One(Field("expression"), Node(Value)),
                Multiple(Path([Field("body"), Field("switch_case")]), Rule("SwitchCase")),
            ]
        ),
        Rule(
            name: "SwitchCase",
            node: SwitchCase,
            children: [
                One(Field("name"), Node(Value)),
                One(Field("value"), Rule("Block")),
            ]
        ),
        Rule(
            name: "DirectApplication", // Deviates from 'translator.rs', name instead of type 
            node: DirectApplication,
            children: [
                // Change tree-sitter-p4 field names to combine both ?
                Maybe(Field("name"), Node(Name)), 
                Maybe(Field("specialized"), Node(Name)),

                Maybe(Field("args"), Rule("Args")),
            ]
        ),
        Rule(
            name: "Return",
            node: Return,
            children: [
                One(Field("value"), Node(Value)),
            ]
        ),
        Rule(
            name: "Type",
            node: Type(Name), // TODO
        ), 
        Rule(
            name: "Direction",
            node: Direction(InOut), // TODO
        ),
        Rule(
            name: "Annotation",
            node: Annotations
        )
    ]
)

