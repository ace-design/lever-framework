LanguageDefinition (
    symbol_types: [
        //("Constant", CONSTANT),
        ("Constant", 21),
        ("Variable", 6),
        ("Type", 25),
        ("Function", 3),
        ("Parameter", 6),
    ],
    ast_rules: [
        Rule(
            name: "Root", // Name of Rule (required)
            node: Node("Root"), // Associated AST Node (required)
            is_scope: true, // defaults to false
            children: [
                Multiple(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Multiple(query: Kind("parser_declaration"), rule: Rule("Parser")),
                Multiple(query: Kind("control_declaration"), rule: Rule("Control")),
                Multiple(query: Kind("instantiation"), rule: Rule("Instantiation")),
                //Multiple(query: Kind("type_declaration"), rule: Rule("TypeDeclaration")),
                Multiple(query: Kind("action_declaration"), rule: Rule("ActionDeclaration")),
                Multiple(query: Kind("function_declaration"), rule: Rule("FunctionDeclaration")),
                Multiple(query: Kind("error_declaration"), rule: Rule("ErrorDeclaration")),
                Multiple(query: Kind("extern_declaration"), rule: Rule("ExternDeclaration")),
            ]
        ),
        Rule(
            name: "ConstantDeclaration",
            node: Node("ConstantDec"),
            symbol: Init("Constant"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            name: "Parser",
            node: Node("ParserDec"),
            symbol: Init("Function"),
            is_scope: true,
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Path([Field("declaration"), Field("name")]), rule: Direct(Node("Name"))),
                One(query: Path([Field("declaration"), Field("parameters")]), rule: Rule("Parameters")),
                One(query: Field("body"), rule: Rule("Body")),
            ]
        ),
        Rule(
            name: "Control",
            node: Node("ControlDec"),
            symbol: Init("Function"),
            is_scope: true,
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Path([Field("declaration"), Field("name")]), rule: Direct(Node("Name"))),
                One(query: Path([Field("declaration"), Field("parameters")]), rule: Rule("Parameters")),
                One(query: Field("body"), rule: Rule("Body")),
            ]
        ),
        Rule(
            name: "Instantiation",
            node: Node("Instantiation"),
            is_scope: true,
            children: [ 
                Maybe(query: Kind("annotation"), rule: Rule("Annotation")),
                One(query: Kind("type_ref"), rule: Rule("Type")),
                One(query: Kind("name"), rule: Direct(Node("Name"))),
                One(query: Kind("argument_list"), rule: Rule("Args")),
            ]
        ),
        Rule(
            name: "TypeDeclaration",
            node: Node("TypeDec"),
            children: [
                
            ]
        ),
        Rule(
            name: "ActionDeclaration",
            node: Node("ControlAction"),
            symbol: Init("Function"),
            is_scope: true,
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("parameters"), rule: Rule("Parameters")),
                One(query: Field("block"), rule: Rule("Block")),
            ],
        ),
        Rule(
            name: "FunctionDeclaration",
            node: Node("Function"),
            //symbol: Init("Function"),
            is_scope: true,
            children: [
                One(query: Kind("function_prototype"), rule: Rule("FunctionPrototype")),
                One(query: Kind("block_statement"), rule: Rule("Block")),
            ]
        ),
        Rule(
            name: "ErrorDeclaration",
            node: Node("ErrorCst"),
            children: [
                One(query: Field("option_list"), rule: Rule("Options")),
            ]
        ),
        Rule(
            name: "ExternDeclaration",
            node: Node("Extern"),
            symbol: Init("Function"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                Maybe(query: Field("name"), rule: Direct(Node("Name"))),
                // maybe type parameters
                Maybe(query: Field("function"), rule: Rule("FunctionPrototype")),
                Maybe(query: Field("method"), rule: Rule("MethodList")),
            ]
        ),
        Rule(
            name: "FunctionPrototype",
            node: Node("FunctionPrototype"),
            children: [
                One(query: Kind("type_or_void"), rule: Rule("Type")),
                One(query: Kind("name"), rule: Direct(Node("Name"))),
                One(query: Kind("parameter_list"), rule: Rule("Parameters")),
            ]
        ),
        Rule(
            name: "MethodList",
            node: Node("Methods"),
            children: [
                Multiple(query: Kind("method_prototype"), rule: Rule("MethodPrototype")),
            ]
        ),
        Rule(
            name: "MethodPrototype",
            node: Node("MethodPrototype"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                Maybe(query: Field("function"), rule: Rule("FunctionPrototype")),
                Maybe(query: Field("type"), rule: Rule("Type")),
                Maybe(query: Field("parameters"), rule: Rule("Parameters")),
            ]
        ),
        Rule(
            name: "Options",
            node: Node("Options"),
            children: [
                Multiple(query: Kind("name"), rule: Direct(Node("Option"))),
            ]
        ),
        Rule(
            name: "Args",
            node: Node("Args"),
            children: [
                Multiple(query: Kind("argument"), rule: Rule("Arg")),
            ]
        ),
        Rule(
            name: "Arg",
            node: Node("Arg"),
        ),
        Rule(
            name: "Parameters",
            node: Node("Params"),
            is_scope: true,
            children: [
                Multiple(query: Kind("parameter"), rule: Rule("Parameter")),
            ]
        ),
        Rule(
            name: "Parameter",
            node: Node("Param"),
            symbol: Init("Parameter"),
            children: [
                Maybe(query: Field("direction"), rule: Rule("Direction")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
            ]
        ),
        Rule(
            name: "Body",
            node: Node("Body"),
            is_scope: true,
            children: [
                Multiple(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Multiple(query: Kind("variable_declaration"), rule: Rule("VariableDeclaration")),
                Multiple(query: Kind("instantiation"), rule: Rule("Instantiation")),
                Multiple(query: Kind("value_set_declaration"), rule: Rule("ValueSetDeclaration")),

                Multiple(query: Kind("parser_state"), rule: Rule("ParserState")),
                Multiple(query: Kind("action_declaration"), rule: Rule("ActionDeclaration")),
                Multiple(query: Kind("table_declaration"), rule: Rule("ControlTable")),
                Multiple(query: Kind("block_statement"), rule: Rule("Block")),
            ]
        ),
        Rule(
            name: "Block",
            node: Node("Block"),
            is_scope: true,
            children: [
                Multiple(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Multiple(query: Kind("variable_declaration"), rule: Rule("VariableDeclaration")),
                Multiple(query: Kind("assignment_or_method_call_statement"), rule: Rule("AssignmentOrMethodCall")),
                Multiple(query: Kind("direct_application"), rule: Rule("DirectApplication")),
                Multiple(query: Kind("conditional_statement"), rule: Rule("Conditional")),
                Multiple(query: Kind("empty_statement"), rule: Direct(Node("EmptyStatement"))),
                Multiple(query: Kind("block_statement"), rule: Rule("Block")),
                Multiple(query: Kind("parser_block_statement"), rule: Rule("Block")),
                Multiple(query: Kind("exit_statement"), rule: Direct(Node("ExitStatement"))),
                Multiple(query: Kind("return_statement"), rule: Rule("Return")),
                Multiple(query: Kind("switch_statement"), rule: Rule("Switch")),
            ]
        ),
        Rule(
            name: "VariableDeclaration",
            node: Node("VariableDec"),
            symbol: Init("Variable"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            name: "Conditional",
            node: Node("Conditional"),
            children: [
                One(query: Field("expression"), rule: Direct(Node("Value"))),
                One(query: Field("bodyIf"), rule: Rule("Block")),
                Maybe(query: Field("bodyElse"), rule: Rule("Block")),
            ]
        ),
        Rule(
            name: "Switch",
            node: Node("Switch"),
            children: [
                One(query: Field("expression"), rule: Direct(Node("Value"))),
                Multiple(query: Path([Field("body"), Field("switch_case")]), rule: Rule("SwitchCase")),
            ]
        ),
        Rule(
            name: "SwitchCase",
            node: Node("SwitchCase"),
            children: [
                One(query: Field("name"), rule: Direct(Node("Value"))),
                One(query: Field("value"), rule: Rule("Block")),
            ]
        ),
        Rule(
            name: "AssignmentOrMethodCall",
            node: Node("Assignment"),
            children: [
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("expression"), rule: Direct(Node("Value"))),
                Maybe(query: Field("parameters"), rule: Rule("Args")),
            ]
        ),
        Rule(
            name: "ControlTable",
            node: Node("ControlTable"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("table"), rule: Rule("Table")),
            ]
        ),
        Rule(
            name: "Table",
            node: Node("Table"),
            children: [
                // TODO
            ]
        ),
        Rule(
            name: "ParserState",
            node: Node("ParserState"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("body"), rule: Rule("Block")),
            ]
        ),
        Rule(
            name: "ValueSetDeclaration",
            node: Node("ValueSet"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("expression"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            name: "DirectApplication", // Deviates from 'translator.rs', name instead of type 
            node: Node("DirectApplication"),
            children: [
                // Change tree-sitter-p4 field names to combine both ?
                Maybe(query: Field("name"), rule: Direct(Node("Name"))), 
                Maybe(query: Field("specialized"), rule: Direct(Node("Name"))),

                Maybe(query: Field("args"), rule: Rule("Args")),
            ]
        ),
        Rule(
            name: "Return",
            node: Node("Return"),
            children: [
                One(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            name: "TypeArgumentList",
            node: Node("TypeArgList"),
            children: [
                Multiple(query: Kind("type_arg"), rule: Rule("Type")),
            ]
        ),
        Rule(
            name: "Type",
            node: Node("Type"), 
        ), 
        Rule(
            name: "Direction",
            node: Node("Direction"),  
        ),
        Rule(
            name: "Annotation",
            node: Node("Annotations")
        )
    ]
)

