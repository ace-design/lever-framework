LanguageDefinition (
    language: (
        name: "P4",
        file_extensions: ["p4", "P4"]
    ),
    keywords: [
        "abstract",
        "action",
        "actions",
        "apply",
        "const",
        "control",
        "default",
        "define",
        "else",
        "entries",
        "enum",
        "error",
        "exit",
        "extern",
        "header",
        "header_union",
        "if",
        "include",
        "key",
        "match_kind",
        "type",
        "parser",
        "package",
        "pragma",
        "return",
        "select",
        "state",
        "struct",
        "switch",
        "table",
        "transition",
        "typedef",
        "varbit",
        "valueset",
    ],
    symbol_types: [
        (name: "Constant", completion_type: Constant, semantic_token_type: Variable),
        (name: "Variable", completion_type: Variable, semantic_token_type: Variable),
        (name: "Type", completion_type: Class, semantic_token_type: Type),
        (name: "Function", completion_type: Function, semantic_token_type: Function),
        (name: "Parameter", completion_type: Variable, semantic_token_type: Parameter),
    ],
    ast_rules: [
        Rule(
            node_name: "Root", // Name of Rule (required)
            is_scope: true, // defaults to false
            children: [
                Many(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Many(query: Kind("parser_declaration"), rule: Rule("Parser")),
                Many(query: Kind("control_declaration"), rule: Rule("Control")),
                Many(query: Kind("instantiation"), rule: Rule("Instantiation")),
                Many(query: Kind("type_declaration"), rule: Rule("TypeDeclaration")),
                Many(query: Kind("action_declaration"), rule: Rule("ActionDeclaration")),
                Many(query: Kind("function_declaration"), rule: Rule("FunctionDeclaration")),
                Many(query: Kind("error_declaration"), rule: Rule("ErrorDeclaration")),
                Many(query: Kind("extern_declaration"), rule: Rule("ExternDeclaration")),
            ]
        ),
        Rule(
            node_name: "ConstantDeclaration",
            symbol: Init(type: "Constant", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            node_name: "Parser",
            is_scope: true,
            symbol: Init(type: "Function", name_node: "Name"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Path([Field("declaration"), Field("name")]), rule: Direct(Node("Name"))),
                One(query: Path([Field("declaration"), Field("parameters")]), rule: Rule("Parameters")),
                One(query: Field("body"), rule: Rule("Body")),
            ]
        ),
        Rule(
            node_name: "Control",
            is_scope: true,
            symbol: Init(type: "Function", name_node: "Name"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Path([Field("declaration"), Field("name")]), rule: Direct(Node("Name"))),
                One(query: Path([Field("declaration"), Field("parameters")]), rule: Rule("Parameters")),
                One(query: Field("body"), rule: Rule("Body")),
            ]
        ),
        Rule(
            node_name: "Instantiation",
            is_scope: true,
            children: [ 
                Maybe(query: Kind("annotation"), rule: Rule("Annotation")),
                One(query: Kind("type_ref"), rule: Rule("Type")),
                One(query: Kind("name"), rule: Direct(Node("Name"))),
                One(query: Kind("argument_list"), rule: Rule("Args")),
            ]
        ),
        Rule(
            node_name: "TypeDeclaration",
            children: [
                Maybe(query: Kind("typedef_declaration"), rule: Rule("TypeDefDeclaration")),
                Maybe(query: Kind("header_type_declaration"), rule: Rule("HeaderTypeDeclaration")),
                Maybe(query: Kind("header_union_declaration"), rule: Rule("HeaderUnionDec")),
                Maybe(query: Kind("struct_type_declaration"), rule: Rule("StructDeclaration")),
                Maybe(query: Kind("enum_declaration"), rule: Rule("EnumDeclaration")),
                Maybe(query: Kind("parser_type_declaration"), rule: Rule("ParserTypeDeclaration")),
                Maybe(query: Kind("control_type_declaration"), rule: Rule("ControlTypeDeclaration")),
                Maybe(query: Kind("package_type_declaration"), rule: Rule("PackageTypeDeclaration")),
            ]
        ),
        Rule(
            node_name: "TypeDefDeclaration",
            symbol: Init(type: "Type", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
            ]
        ),
        Rule(
            node_name: "HeaderTypeDeclaration",
            symbol: Init(type: "Type", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("field_list"), rule: Rule("FieldList"))
                // maybe type parameters
            ]
        ), 
        Rule(
            node_name: "HeaderUnionDeclaration",
            symbol: Init(type: "Type", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("field_list"), rule: Rule("FieldList"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "StructDeclaration",
            symbol: Init(type: "Type", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("field_list"), rule: Rule("FieldList"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "EnumDeclaration", // Maybe split this to EnumDeclaration and SpecifiedEnumDeclaration ?
            symbol: Init(type: "Type", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                Maybe(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Kind("identifier_list"), rule: Rule("OptionList")),
                Maybe(query: Kind("specified_identifier_list"), rule: Rule("SpecifiedOptionList"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "ParserTypeDeclaration",
            symbol: Init(type: "Function", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("parameters"), rule: Rule("Parameters"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "ControlTypeDeclaration",
            symbol: Init(type: "Function", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("parameters"), rule: Rule("Parameters"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "PackageTypeDeclaration",
            symbol: Init(type: "Function", name_node: "Name"),
            children: [ 
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("parameters"), rule: Rule("Parameters"))
                // maybe type parameters
            ]
        ),
        Rule(
            node_name: "FieldList",
            children: [
                Many(query: Kind("struct_field"), rule: Rule("Field"))
            ]
        ),
        Rule(
            node_name: "Field",
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
            ]
        ),
        Rule(
            node_name: "OptionList",
            children: [
                Many(query: Kind("name"), rule: Direct(Node("Option"))),
            ]
        ),
        Rule(
            node_name: "SpecifiedOptionList",
            children: [
                Many(query: Kind("name"), rule: Direct(Node("Option"))),
            ]
        ),
        Rule(
            node_name: "SpecifiedOption",
            children: [
                One(query: Kind("name"), rule: Direct(Node("Option"))),
                One(query: Kind("initializer"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            node_name: "ActionDeclaration",
            symbol: Init(type: "Function", name_node: "Name"),
            is_scope: true,
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("parameters"), rule: Rule("Parameters")),
                One(query: Field("block"), rule: Rule("Block")),
            ],
        ),
        Rule(
            node_name: "FunctionDeclaration",
            //symbol: Init(type: "Function", name_node: ["FunctionPrototype", "Name"]),
            is_scope: true,
            children: [
                One(query: Kind("function_prototype"), rule: Rule("FunctionPrototype")),
                One(query: Kind("block_statement"), rule: Rule("Block")),
            ]
        ),
        Rule(
            node_name: "ErrorDeclaration",
            children: [
                One(query: Field("option_list"), rule: Rule("Options")),
            ]
        ),
        Rule(
            node_name: "ExternDeclaration",
            symbol: Init(type: "Function", name_node: "Name"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                Maybe(query: Field("name"), rule: Direct(Node("Name"))),
                // maybe type parameters
                Maybe(query: Field("function"), rule: Rule("FunctionPrototype")),
                Maybe(query: Field("method"), rule: Rule("MethodList")),
            ]
        ),
        Rule(
            node_name: "FunctionPrototype",
            children: [
                One(query: Kind("type_or_void"), rule: Rule("Type")),
                One(query: Kind("name"), rule: Direct(Node("Name"))),
                One(query: Kind("parameter_list"), rule: Rule("Parameters")),
            ]
        ),
        Rule(
            node_name: "MethodList",
            children: [
                Many(query: Kind("method_prototype"), rule: Rule("MethodPrototype")),
            ]
        ),
        Rule(
            node_name: "MethodPrototype",
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                Maybe(query: Field("function"), rule: Rule("FunctionPrototype")),
                Maybe(query: Field("type"), rule: Rule("Type")),
                Maybe(query: Field("parameters"), rule: Rule("Parameters")),
            ]
        ),
        Rule(
            node_name: "Options",
            children: [
                Many(query: Kind("name"), rule: Direct(Node("Option"))),
            ]
        ),
        Rule(
            node_name: "Args",
            children: [
                Many(query: Kind("argument"), rule: Rule("Arg")),
            ]
        ),
        Rule(
            node_name: "Arg",
        ),
        Rule(
            node_name: "Parameters",
            children: [
                Many(query: Kind("parameter"), rule: Rule("Parameter")),
            ]
        ),
        Rule(
            node_name: "Parameter",
            symbol: Init(type: "Parameter", name_node: "Name"),
            children: [
                Maybe(query: Field("direction"), rule: Rule("Direction")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
            ]
        ),
        Rule(
            node_name: "Body",
            is_scope: true,
            children: [
                Many(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Many(query: Kind("variable_declaration"), rule: Rule("VariableDeclaration")),
                Many(query: Kind("instantiation"), rule: Rule("Instantiation")),
                Many(query: Kind("value_set_declaration"), rule: Rule("ValueSetDeclaration")),

                Many(query: Kind("parser_state"), rule: Rule("ParserState")),
                Many(query: Kind("action_declaration"), rule: Rule("ActionDeclaration")),
                Many(query: Kind("table_declaration"), rule: Rule("ControlTable")),
                Many(query: Kind("block_statement"), rule: Rule("Block")),
            ]
        ),
        Rule(
            node_name: "Block",
            is_scope: true,
            children: [
                Many(query: Kind("constant_declaration"), rule: Rule("ConstantDeclaration")),
                Many(query: Kind("variable_declaration"), rule: Rule("VariableDeclaration")),
                Many(query: Kind("assignment_or_method_call_statement"), rule: Rule("AssignmentOrMethodCall")),
                Many(query: Kind("direct_application"), rule: Rule("DirectApplication")),
                Many(query: Kind("conditional_statement"), rule: Rule("Conditional")),
                Many(query: Kind("empty_statement"), rule: Direct(Node("EmptyStatement"))),
                Many(query: Kind("block_statement"), rule: Rule("Block")),
                Many(query: Kind("parser_block_statement"), rule: Rule("Block")),
                Many(query: Kind("exit_statement"), rule: Direct(Node("ExitStatement"))),
                Many(query: Kind("return_statement"), rule: Rule("Return")),
                Many(query: Kind("switch_statement"), rule: Rule("Switch")),
            ]
        ),
        Rule(
            node_name: "VariableDeclaration",
            symbol: Init(type: "Variable", name_node: "Name"),
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            node_name: "Conditional",
            children: [
                One(query: Field("expression"), rule: Direct(Node("Value"))),
                One(query: Field("bodyIf"), rule: Rule("Block")),
                Maybe(query: Field("bodyElse"), rule: Rule("Block")),
            ]
        ),
        Rule(
            node_name: "Switch",
            children: [
                One(query: Field("expression"), rule: Direct(Node("Value"))),
                Many(query: Path([Field("body"), Field("switch_case")]), rule: Rule("SwitchCase")),
            ]
        ),
        Rule(
            node_name: "SwitchCase",
            children: [
                One(query: Field("name"), rule: Direct(Node("Value"))),
                One(query: Field("value"), rule: Rule("Block")),
            ]
        ),
        Rule(
            node_name: "AssignmentOrMethodCall",
            children: [
                One(query: Field("name"), rule: Direct(Node("Name"))),
                Maybe(query: Field("expression"), rule: Direct(Node("Value"))),
                Maybe(query: Field("parameters"), rule: Rule("Args")),
            ]
        ),
        Rule(
            node_name: "ControlTable",
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("table"), rule: Rule("Table")),
            ]
        ),
        Rule(
            node_name: "Table",
            children: [
                // TODO
            ]
        ),
        Rule(
            node_name: "ParserState",
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("body"), rule: Rule("Block")),
            ]
        ),
        Rule(
            node_name: "ValueSetDeclaration",
            children: [
                Maybe(query: Field("annotation"), rule: Rule("Annotation")),
                One(query: Field("type"), rule: Rule("Type")),
                One(query: Field("name"), rule: Direct(Node("Name"))),
                One(query: Field("expression"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            node_name: "DirectApplication", // Deviates from 'translator.rs', name instead of type 
            children: [
                // Change tree-sitter-p4 field names to combine both ?
                Maybe(query: Field("name"), rule: Direct(Node("Name"))), 
                Maybe(query: Field("specialized"), rule: Direct(Node("Name"))),

                Maybe(query: Field("args"), rule: Rule("Args")),
            ]
        ),
        Rule(
            node_name: "Return",
            children: [
                One(query: Field("value"), rule: Direct(Node("Value"))),
            ]
        ),
        Rule(
            node_name: "TypeArgumentList",
            children: [
                Many(query: Kind("type_arg"), rule: Rule("Type")),
            ]
        ),
        Rule(
            node_name: "Type",
            symbol: Usage,
            children: [
                Maybe(query: Kind("type_name"), rule: Direct(Node("Name"))),
            ]
        ), 
        Rule(
            node_name: "Direction",
        ),
        Rule(
            node_name: "Annotation",
        )
    ]
)

